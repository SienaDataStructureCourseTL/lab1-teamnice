#BlueJ class context
comment0.target=Matrix2D
comment0.text=\r\n\ \ A\ class\ representing\ a\ square\ matrix\ with\ some\ methods\ to\ manipulate\r\n\ \ such\ matrices.\r\n\ \ \r\n\ @author\ Jim\ Teresco,\ modified\ by\ Prof.\ White\ and\ (your\ names\ here)\r\n\ @version\ Fall\ 2019\r\n
comment1.params=size
comment1.target=Matrix2D(int)
comment1.text=\r\n\ A\ basic\ constructor\ to\ allocate\ but\ not\ otherwise\ initialize\ a\ matrix,\ so\r\n\ by\ the\ rules\ of\ Java,\ all\ entries\ are\ initially\ 0.\r\n\ \r\n\ @param\ size\ The\ desired\ size\ of\ the\ square\ matrix.\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Return\ the\ matrix\ as\ a\ String\ that\ will\ print\ in\ a\ nice\ format.\r\n\ \r\n\ @return\ The\ matrix\ as\ a\ String\ that\ will\ print\ in\ a\ nice\ format.\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment2.params=low\ high
comment2.target=void\ randomInit(int,\ int)
comment2.text=\r\n\ Initialize\ the\ entries\ randomly\ within\ a\ range.\r\n\ \r\n\ @param\ low\ The\ low\ end\ of\ the\ range.\r\n\ @param\ high\ The\ high\ end\ of\ the\ range.\r\n
comment3.params=
comment3.target=void\ setToIdentity()
comment3.text=\r\n\ Make\ this\ the\ identity\ matrix.\r\n
comment4.params=row\ col\ value
comment4.target=void\ set(int,\ int,\ int)
comment4.text=\r\n\ Element\ mutator.\ \ Throws\ an\ exception\ if\ the\ row\ or\ column\ is\ not\ valid.\r\n\ \r\n\ @param\ row\ The\ row\ index\ of\ the\ element\ to\ be\ changed.\r\n\ @param\ col\ The\ column\ index\ of\ the\ element\ to\ be\ changed.\r\n\ @param\ value\ The\ new\ value\ to\ be\ assigned\ at\ the\ input\ row\ and\ column\ location.\r\n
comment5.params=row\ col
comment5.target=int\ get(int,\ int)
comment5.text=\r\n\ Element\ accessor.\ \ Throws\ an\ exception\ if\ row\ or\ column\ is\ not\ valid.\r\n\ \r\n\ @param\ The\ row\ of\ the\ element\ to\ be\ returned.\r\n\ @param\ The\ column\ of\ the\ element\ to\ be\ returned.\r\n\ @return\ The\ element\ located\ at\ the\ input\ row\ and\ column.\r\n
comment6.params=
comment6.target=int\ maxValue()
comment6.text=\r\n\ Returns\ the\ largest\ value\ in\ the\ matrix.\r\n\ \r\n\ @param\ Returns\ the\ largest\ value\ in\ the\ matrix.\r\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\r\n\ \ Compare\ two\ matrices\ for\ equality.\ \ Two\ matricies\ are\ equal\ if\ they\ have\ the\r\n\ \ same\ dimensions\ and\ the\ same\ elements\ at\ every\ location\ in\ the\ matrix.\r\n\ \ \r\n\ \ Note\ that\ we\ must\ take\ a\ parameter\ of\ type\ Object\ to\ override\ the\ inherited\ \r\n\ \ equals\ method.\ \r\n\ \ \r\n\ \ @param\ other\ The\ Matrix2D\ object\ to\ be\ compared\ to\ this\ matrix.\r\n
comment8.params=other
comment8.target=Matrix2D\ add(Matrix2D)
comment8.text=\r\n\ \ Nondestructive\ matrix-matrix\ add.\ \ Throws\ an\ exception\ if\ the\ input\ \r\n\ \ matrix\ does\ not\ have\ the\ same\ dimensions\ as\ this\ matrix.\r\n\ \ \r\n\ \ Create\ a\ new\ array\ whose\ elements\ are\ the\ sum\ of\ the\ elements\ of\r\n\ \ the\ input\ matrix\ and\ this\ matrix\ for\ the\ same\ row\ and\ column\ \r\n\ \ indexes.\r\n\ \ \r\n\ \ @param\ other\ The\ Matrix2D\ object\ to\ be\ compared\ to\ this\ matrix.\r\n\ \ @return\ A\ new\ matrix\ whose\ elements\ are\ the\ sum\ of\ the\ input\r\n\ \ \ \ \ \ \ \ \ \ matrix\ and\ this\ matrix\ for\ the\ same\ row\ and\ column\r\n\ \ \ \ \ \ \ \ \ \ indexes.\r\n
comment9.params=by
comment9.target=void\ scale(int)
comment9.text=\r\n\ Multiples\ every\ entry\ in\ this\ matrix\ by\ the\ input\ value.\r\n\ \r\n\ @param\ by\ The\ amount\ by\ which\ the\ matrix\ is\ scaled.\r\n
numComments=12
